;;-------------------------------------------------
;;Title         :Emacs config file
;;Author        :Ivan Batistic
;;Version       :0.1
;;Date          :09/23
;;-------------------------------------------------


; Settings for terminal emacs
;(set-face-background 'default "#f2f4f4")
(set-face-foreground 'default "black")
(xterm-mouse-mode t)

; Scroling behaviour
(setq scroll-step 1 scroll-conservatively 100 scroll-margin 15)

; To be able to use context between different instances
(setq x-select-enable-clipboard t)

; To imidiately test command use: C+M+x
; To use this config file make a soft link to $HOME/.emacs

; Stop creating ~ files (backup files)
(setq make-backup-files nil)
; option for alternative location: (setq backup-directory-alist  '((".*" . "~/.Trash")))

; Don't show the splash screen
(setq inhibit-startup-screen t)

; Indents are 4 chars
(setq c-basic-offset 4)
(c-set-offset 'substatement-open 0)

; 4 char wide TAB
(setq tab-width 4)

; Highlight matching parenthesis
(show-paren-mode 1)

; Display line numbers in every buffer
(global-display-line-numbers-mode 1)

; Flash when the bell rings			;
(setq visible-bell t)

; Tool bar, menu bar ON/OFF
(tool-bar-mode 1)
(menu-bar-mode 1)

; Highlight current line; highlighted color
;(global-hl-line-mode 1)
;(set-face-background 'hl-line "#E3E6E2")
;(set-face-foreground 'highlight nil)

; Colour of marked lines
(set-face-attribute 'region nil :background "#C3FDB8")

;;; Show cursor position within line
(column-number-mode 1)

;;; Disable reindentation when new line is used
;;(electric-indent-mode -1)

; Color of trailing spaces
(setq-default show-trailing-whitespace t)
(set-face-background 'trailing-whitespace "yellow")

; Color of trailing tab spaces
(defface extra-whitespace-face '((t (:background "yellow"))) "Color for tabs and such.")
(defvar bad-whitespace '(("\t" . 'extra-whitespace-face)))
;;
;;
;;
;;
;;; Make tab key always call a indent command.
;;;(setq-default tab-always-indent t)
;;
;;; Make indent commands use space only (never tab character)
;;(setq-default indent-tabs-mode nil)
;;(setq tabify nil)
;;
;;;https://superuser.com/questions/268029/how-can-i-disable-smart-indentation-in-emacs-and-force-either-spaces-or-tabs
;;(defvar just-tab-keymap (make-sparse-keymap) "Keymap for just-tab-mode")
;;;(define-minor-mode just-tab-mode
;;;   "Just want the TAB key to be a TAB"
;;;   :global t :lighter " TAB" :init-value 0 :keymap just-tab-keymap
;;;   (define-key just-tab-keymap (kbd "TAB") 'self-insert-command))
;;(local-set-key (kbd "TAB") 'tab-to-tab-stop)
;;
;;; Set size of new window
;;(when window-system (set-frame-size (selected-frame) 90 70))
;;
;;; Delete trailing white spaces when saving document
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;;
;;; Displat ruler at column 80
(setq-default fill-column 80)  ;; Set default fill column
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)

;;
;;; No more typing the whole yes or no. Just y or n will do.
(fset 'yes-or-no-p 'y-or-n-p)

;;; Scroll one line at a time (less "jumpy" than defaults)
;;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
;;(setq mouse-wheel-progressive-speed nil)

;;; Fast scrolling removes lag
;;(setq fast-but-imprecise-scrolling t)

; Prevent emacs split horizontaly when opening new file
(add-hook 'window-setup-hook 'delete-other-windows)
;;
;;; Compile .tex file using arara (C-c C-c Enter)
;;(eval-after-load "tex"
;;  '(add-to-list 'TeX-command-list
;;        '("Arara" "arara --verbose %s" TeX-run-TeX nil t :help "Run Arara.")))
;;
;;(with-eval-after-load "latex"
;;  (define-key LaTeX-mode-map (kbd "C-c C-a")
;;     (lambda ()
;;       (interactive)
;;       (TeX-command-sequence '("Arara" "View") t))))
;;
;;



;;;-----------------------------------------------------
;;; SANDBOX
;;;-----------------------------------------------------
;;
;;; Ruler at column 80
;(setq-default fill-column 80)
;;
;;
;;;; Remove messages from the *Messages* buffer.
;;(setq-default message-log-max nil)
;;
;;;; Empty the *scratch* buffer.
(setq initial-scratch-message "")

; https://emacs.stackexchange.com/questions/60085/how-to-prevent-scratch-or-messages-buffer-to-show-up-when-i-open-via-em
; Kill both buffers on startup.
(kill-buffer "*Messages*")

; This one is not working
(kill-buffer "*scratch*")

;;
;;; https://www.reddit.com/r/emacs/comments/ji9nk0/why_is_emacs_is_so_laggy/
;;(setq gc-cons-threshold (* 100 1024 1024))

;-----------------------------------------------------
; PACKAGES
;-----------------------------------------------------

;https://ianyepan.github.io/posts/setting-up-use-package/
(require 'package)

(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("gnu"   . "https://elpa.gnu.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;(unless (package-installed-p 'use-package)
;  (package-refresh-contents)
;  (package-install 'use-package))
;(eval-and-compile
;  (setq use-package-always-ensure t
;        use-package-expand-minimally t))

(setq git-gutter:modified-sign "≋")
(setq git-gutter:added-sign    "✚")
(setq git-gutter:deleted-sign  "✖")

;https://ianyepan.github.io/posts/emacs-git-gutter/
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:update-interval 0.02))

(when (display-graphic-p)
(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [224 224 224 224] nil nil '(center repeated))))

;-----------------------------------------------------
; CUSTOM SET VARIABLES
;-----------------------------------------------------

;;(custom-set-variables
;; ;; custom-set-variables was added by Custom.
;; ;; If you edit it by hand, you could mess it up, so be careful.
;; ;; Your init file should contain only one such instance.
;; ;; If there is more than one, they won't work right.
;; '(package-selected-packages '(git-gutter use-package cmake-mode)))
;;(custom-set-faces
;; ;; custom-set-faces was added by Custom.
;; ;; If you edit it by hand, you could mess it up, so be careful.
;; ;; Your init file should contain only one such instance.
;; ;; If there is more than one, they won't work right.
;; )
;;
;;
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages '(fringe-helper git-gutter git-gutter-fringe)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
